// recursive.andl

{{ z:=0 }} .while( {{z:=z+1}} .where(z<10) )

{{ x:= 1 }} .while( {{ x:=x*2 }} .where(x<=5000000000) )

var orgchart(csv)
orgchart
ua := {{ name:= 'Alice', level := 0 }} .while( {{ boss := name, level := level+1 }} compose orgchart)
ua
ua .{ t:=fill('.', level*3) & name }

//{{ name:= 'Alice', level := 0 }} .while(
//    ({{ boss := name, level := level+1 }} compose orgchart)$(-level)
//    )

var family_tree(csv)
family_tree

family_tree  .where(id=1) .{ id, firstname, lastname, level:=0 }
   .while( {{ father_id:=id, level:=level+1 }} compose family_tree.{id, firstname, lastname,father_id} )

var MM(csv)
MM
MM .while( {{ z:=MAJOR_P#, MINOR_P# }} compose MM.{ MAJOR_P#, z:=MINOR_P# } )
MM .while( {{ MAJOR_P#, z:=MINOR_P# }} compose MM.{ z:=MAJOR_P#, MINOR_P# } )
//{{ MAJOR_P#:'',MINOR_P#:'' }} .while( {{ z:=MAJOR_P#, MINOR_P# }})

// from this SQL
//WITH RECURSIVE
//  under_alice(name,level) AS (
//    VALUES('Alice',0)
//    UNION ALL
//    SELECT org.name, under_alice.level+1
//      FROM org JOIN under_alice ON org.boss=under_alice.name
//     ORDER BY 2
//  )
//SELECT substr('..........',1,level*3) || name FROM under_alice;

#stop

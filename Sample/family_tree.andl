// some test queries based on a family tree

var family_tree(csv)

family_tree.schema

family_tree

// define a relational type
$xyt := {{x:=0,y:=0}}

// define a recursive function that takes a relation of that type as an argument
// Note: relvar needs to be local to function, not in database
tranclo:$xyt(xy:$xyt) => do {
    $ttt := xy .select{ *z := y } compose xy .select{ *z := x } union xy
    if($ttt = xy, $ttt, tranclo($ttt))
}

$tcf := tranclo(family_tree .select{ x:=id, y:=father_id })
$tf := $tcf join family_tree
   .select{ x:=id, child:=lastname & ', ' & firstname } join family_tree 
   .select{ y:=id, i'male ancestor':=lastname & ', ' & firstname }
  
$tf .select{ *x,y }
$tcm := tranclo(family_tree .select{ x:=id, y:=mother_id })
$tm := $tcm join family_tree
   .select{ x:=id, child:=lastname & ', ' & firstname } join family_tree 
   .select{ y:=id, i'female ancestor':=lastname & ', ' & firstname }
  
$tm .select{ *x,y }

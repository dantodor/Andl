// Test Defer -- deferred variables and functions, blocks, user types

#catalog

start($filename$)

//--- defer
_dv1 => 22
test_true($lineno$, 22 = _dv1)

_av1 := 22
_dv2 => _av1*2 + _dv1*2
test_true($lineno$, 88 = _dv2)

//--- arguments
_fn1(x:0) => x*10
test_true($lineno$, 30 = _fn1(3))

_fn3(x:0) => seq(x)
test_true($lineno$, seq(4) = _fn3(4))

_fact:0(n:0) => if(n<=1,1,n*_fact(n-1))
test_true($lineno$, 720 = _fact(6))

//--- do blocks
_pot:0(n:0) => do { if(n<=0,1,10*_pot(n-1)) }
test_true($lineno$, 1000000 = _pot(6))

_dfact:0(n:0) => do {
  nn => n*_dfact(n-1)
  if(n<=1,1,nn)
}
test_true($lineno$, 720 = _dfact(6))
test_true($lineno$, 2432902008176640000 = _dfact(20))

//--- scopes
_fns0(t:'') => do {
  a := t & 'xxx'
  a
}
test_true($lineno$, 'xyzxxx' = _fns0('xyz'))

_fns1(n:0) => do {
  a := n+2
  a - 2
}
test_true($lineno$, 7 = _fns1(7))

_rv1 := {{ A1:='abc', A2:=17 }}
_fns2(rr:_rv1) => do {
  a := rr
  rr
}
test_true($lineno$, _rv1 = _fns2(_rv1))

// --- user types as parameters

_rv1 := {{ A2:number, A1:text }}
_rv2 := {{ A1:='abc', A2:=17 }}
def _usr1(A2:number, A1:text)
def _usr2(A1:text, A2:number)

fr1(arg:_rv1) => do {
  a := arg
  a
}
fr2(arg:_rv2) => do {
  a := arg
  a
}
fr3(arg:_usr1) => do {
  a := arg
  a
}
fr4(arg:_usr2) => do {
  a := arg
  a
}

test_true($lineno$, _rv2            = fr1(_rv2))
test_true($lineno$, _rv2            = fr2(_rv2))
test_true($lineno$, _usr1(3, 'abc')  = fr3(_usr1(3, 'abc')))
test_true($lineno$, _usr2('abc', 4)  = fr4(_usr2('abc', 4)))

// --- stack check

_fnret2 => do {
    {{}}
    1111
}
test_true($lineno$, 1111 = _fnret2)
_stv := _fnret2
test_true($lineno$, 1111 = _stv)


finish($filename$)
//andl_catalog

// Test Defer -- deferred variables and functions, blocks, user types

#catalog

start($filename$)

//--- defer
d1 => 22
test_true($lineno$, 22 = d1)

a1 := 22
d2 => a1*2 + d1*2
test_true($lineno$, 88 = d2)

//--- arguments
f1(x:0) => x*10
test_true($lineno$, 30 = f1(3))

f3(x:0) => seq(x)
test_true($lineno$, seq(4) = f3(4))

fact:0(n:0) => if(n<=1,1,n*fact(n-1))
test_true($lineno$, 720 = fact(6))

//--- do blocks
pot:0(n:0) => do { if(n<=0,1,10*pot(n-1)) }
test_true($lineno$, 1000000 = pot(6))

dfact:0(n:0) => do {
  nn => n*dfact(n-1)
  if(n<=1,1,nn)
}
test_true($lineno$, 720 = dfact(6))
test_true($lineno$, 2432902008176640000 = dfact(20))

//--- scopes
scope0(t:'') => do {
  a := t & 'xxx'
  a
}
test_true($lineno$, 'xyzxxx' = scope0('xyz'))

scope1(n:0) => do {
  a := n+2
  a - 2
}
test_true($lineno$, 7 = scope1(7))

r := {{ name:='abc', id:=17 }}
scope2(rr:r) => do {
  a := rr
  rr
}
test_true($lineno$, r = scope2(r))

// --- user types

rr1 := {{ id:number, name:text }}
rr2 := {{ name:='abc', id:=17 }}
def rt1(id:number, name:text)
def rt2(name:text, id:number)

fr1(arg:rr1) => do {
  a := arg
  a
}
fr2(arg:rr2) => do {
  a := arg
  a
}
fr3(arg:rt1) => do {
  a := arg
  a
}
fr4(arg:rt2) => do {
  a := arg
  a
}

test_true($lineno$, rr2            = fr1(rr2))
test_true($lineno$, rr2            = fr2(rr2))
test_true($lineno$, rt1(3, 'abc')  = fr3(rt1(3, 'abc')))
test_true($lineno$, rt2('abc', 4)  = fr4(rt2('abc', 4)))

finish($filename$)
//andl_catalog

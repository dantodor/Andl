// Test Suite 1 -- basic testing of language features

#include TestLib.andl

start($filename$)

//--- defer
d1 => 22
assert($lineno$, d1 = 22)
a1 := 22
d2 => a1*2 + d1*2
assert($lineno$, d2 = 88)

f1(x:0) => x*10
assert($lineno$, f1(3) = 30)

f3(x:0) => seq(x)
assert($lineno$, f3(4) = seq(4))

fact:0(n:0) => if(n<=1,1,n*fact(n-1))
assert($lineno$, fact(6) = 720)

pot:0(n:0) => if(n<=0,1,10*pot(n-1))
assert($lineno$, pot(6) = 1000000)

dfact:0(n:0) => do {
  nn => n*dfact(n-1)
  if(n<=1,1,nn)
}
assert($lineno$, dfact(6) = 720)
assert($lineno$, dfact(20) = 2432902008176640000)

scope0(t:'') => do {
  a := t & 'xxx'
  a
}
assert($lineno$, scope0('xyz') = 'xyzxxx')

scope1(n:0) => do {
  a := n+2
  a - 2
}
assert($lineno$, scope1(7) = 7)

r := {{ name:='abc', id:=17 }}
scope2(rr:r) => do {
  a := rr
  rr
}
assert($lineno$, scope2(r) = r)

// --- user types

rr1 := {{ id:number, name:text }}
rr2 := {{ name:='abc', id:=17 }}
def :rt1(id:number, name:text)
def :rt2(name:text, id:number)

fr1(arg:rr1) => do {
  a := arg
  a
}
fr2(arg:rr2) => do {
  a := arg
  a
}
fr3(arg:rt1) => do {
  a := arg
  a
}
fr4(arg:rt2) => do {
  a := arg
  a
}

assert($lineno$, fr1(rr2) = rr2)
assert($lineno$, fr2(rr2) = rr2)
assert($lineno$, fr3(rt1(3, 'abc')) = rt1(3, 'abc'))
assert($lineno$, fr4(rt2('abc', 4)) = rt2('abc', 4))

finish($filename$)
//andl_catalog

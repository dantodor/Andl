// Test Suite -- testing of aggregation

#catalog

start($filename$)

// simple folds
assert($lineno$, 30 = S .set{ fold(max,STATUS) })
assert($lineno$, 10 = S .set{ fold(min,STATUS) })
assert($lineno$, false = S .set{ fold(and,STATUS = 10) })
assert($lineno$, true = S .set{ fold(and,STATUS >= 10) })
assert($lineno$, true = S .set{ fold(or,STATUS = 10) })
assert($lineno$, false = S .set{ fold(or,STATUS < 10) })

assert($lineno$, 20+10+30+20+30 = S .set{ fold(+,STATUS) })
assert($lineno$, 20*10*30*20*30 = S .set{ fold(*,STATUS) })

// will not compile - cannot invoke overloaded operator
//assert($lineno$, 0 and 20 and 10 and 30 and 20 and 30 = S .set{ fold(and,STATUS) })
//assert($lineno$, 0 or 20 or 10 or 30 or 20 or 30 = S .set{ fold(or,STATUS) })
//assert($lineno$, 20&10&30&20&30 = S  .order(S#) .set{ fold(&,STATUS) })

// this way works
bitand(a:0,b:0) => a and b
bitor(a:0,b:0) => a or b
assert($lineno$, (0 and 20 and 10 and 30 and 20 and 30) = S .set{ fold(bitand,STATUS) })
assert($lineno$, (0 or 20 or 10 or 30 or 20 or 30) = S .set{ fold(bitor,STATUS) })
assert($lineno$, 20&10&30&20&30 = S  .order(S#) .set{ fold(&,STATUS.text) })

// more operators
assert($lineno$, 1/20/10/30/20/30 = S  .order(S#) .set{ fold(/,STATUS) })
assert($lineno$, 0-20-10-30-20-30 = S  .order(S#) .set{ fold(-,STATUS) })

// above and below fold
assert($lineno$, 110 = S .set{ fold(+,STATUS) })
assert($lineno$, 115 = S .set{ fold(+,STATUS+1) })
assert($lineno$, 111 = S .set{ fold(+,STATUS)+1 })
assert($lineno$, 111 = S .set{ fold(+,STATUS) } +1)

// folded bare function
fmax(n:0) => fold(max,n)
fcat(s:'') => fold(&,s)
assert($lineno$, 30 = S .set{ fmax(STATUS)  })
assert($lineno$, 20&10&30&20&30 = S  .order(S#) .set{ fcat(STATUS.text)  })

// folded do function
fdomax(n:0) => do { fold(max,n) }
fdocat(s:'') => do { fold(&,s) }
assert($lineno$, 30 = S .set{ fdomax(STATUS) })
assert($lineno$, 20&10&30&20&30 = S  .order(S#) .set{ fdocat(STATUS.text) })

// folded do multi-line function
fdomax2(n:0) => do { 
    x:=n*10
    fold(max,x) 
}
fdocat2(s:'') => do { 
    ss:=s & 'x'
    fold(&, ss) 
}
assert($lineno$, 300 = S .set{ fdomax2(STATUS) })
assert($lineno$, '20x10x30x20x30x' = S  .order(S#) .set{ fdocat2(STATUS.text) })

// These previously placed in catalog
//fold_sum(n:0) => fold(+,n)
//fold_ave(n:0) => fold(+,n)/fold(+,1)
assert($lineno$, 110 = S .set{ fold_sum(STATUS)  })
assert($lineno$, 22 = S .set{ fold_ave(STATUS)  })

feven:0(n1:0, n2:0) => if(n2 mod 20 = 0, n1+n2, n1-n2)
fcomma(s1:'', s2:'') => if(s1='',s2, s1 & ', ' & s2)
assert($lineno$, -30 = S .set{ fold(feven,STATUS) })
assert($lineno$, '20, 10, 30, 20, 30' = S  .order(S#) .set{ fold(fcomma,STATUS.text) })

PX := P .set{ * W1:=WEIGHT, W2:=WEIGHT*2-10 }

R1 := PX .set{ COLOR, SW1:=fold(+,W1), SW2 := fold(+,W2), SSW1:=fold(+,W1*W1), SSW2 := fold(+,W2*W2), AW1 := fold(+,W1)/fold(+,1), AW2 := fold(+,W2)/fold(+,1) } 
sum(n:0) => fold(+,n)
sumsq(n:0) => fold(+,n*n)
avg(n:0) => fold(+,n)/fold(+,1)
R2 := PX .set{ COLOR, SW1:=sum(W1), SW2 := sum(W2), SSW1:=sumsq(W1), SSW2 := sumsq(W2), AW1 := avg(W1), AW2 := avg(W2) } 
assert($lineno$, R1 = R2)

finish($filename$)

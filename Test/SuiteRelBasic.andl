// Test Suite -- basic testing of relational features

#catalog

start($filename$)

//--- literals

t1 := {name := 'Smith', age := 17} 
assert($lineno$, t1 = {age := 16+1, name := 'Smi''th'})

r1 := {{age := 17, name := 'Smith'}} 
r1a := {{name := 'Smith', age := 17}} 
assert($lineno$, r1 = r1a)
assert($lineno$, r1 = {{age := 1+16, name := 'S'&'mith'}})

r2 := {{name := 'Smith', age := 17},
       {name := 'Jones', age := 35},
       {age :=199,name:='Frankenstein' }} 
assert($lineno$, r2 = {{age := 35, name := 'Jones'},
      {age := 17, name := 'Smith'},
      {name:='Frankenstein',age :=199}})

assert($lineno$, r1 = {{name:'',age:0}('Smith', 17)})
assert($lineno$, r1 = {{name:text,age:number}('Smith', 17)})
assert($lineno$, r2 = {{name:'',age:0}('Smith', 17),('Jones', 35),('Frankenstein',199 )})

//--- set operators, literals

assert($lineno$, r1.count = 1)
assert($lineno$, r2.count = 3)

assert($lineno$, r1 sub r1)
assert($lineno$, r1 sub r2)
assert($lineno$, r2 sup r1)
assert($lineno$, r2 sup r2)
assert($lineno$, r1 sep r2 = false)
assert($lineno$, r2 sep r1 = false)

//--- meta data uses internal table
Smeta0 := {{ Type:'', Name:'' }}
assert($lineno$, Smeta0.count = 0)

Smeta1 := {{ Type:='', Name:='' }}
assert($lineno$, Smeta1.count = 1)

Smeta := {{ Name := 'S#', Type := 'text'}, 
    { Name := 'SNAME', Type := 'text'}, 
    { Name := 'STATUS', Type := 'number'}, 
    { Name := 'CITY', Type := 'text'} }

assert($lineno$, count(Smeta0 union Smeta1 union Smeta) = 5)
assert($lineno$, schema(S) = Smeta)
assert($lineno$, S.schema = Smeta)

//--- set operators, variables
assert($lineno$, count(S) = 5)
assert($lineno$, S.count = 5)

assert($lineno$, S sub S)
assert($lineno$, not(S sub S .where(SNAME='Smith')))
assert($lineno$, S sup S)
assert($lineno$, S sup S .where(SNAME = 'Smith'))
assert($lineno$, S sup S .where(SNAME <> 'Smith'))
assert($lineno$, not(S sep S))
assert($lineno$, S .where(SNAME = 'Smith') sep S .where(SNAME <> 'Smith'))

//--- monadic
assert($lineno$, S .where(true) = S)
assert($lineno$, S .where(false) <> S)
assert($lineno$, S .where(false) = {{STATUS : 0, CITY : '', S# : '', SNAME : ''}})
assert($lineno$, S .where(false) = {{S# := '', SNAME := '', STATUS := 0, CITY := ''}} .where(false))
assert($lineno$, S .where(false) = {{STATUS := 0, CITY := '', S# := '', SNAME := ''}} .where(false))

Sstatus := {{STATUS := 20}, {STATUS := 10}, {STATUS := 30} }
assert($lineno$, S.{STATUS} = Sstatus)
assert($lineno$, S.{X := STATUS} = Sstatus .{X := STATUS})

Ss4 := {{ S# := 'S4', CITY := 'London', STATUS := 020, SNAME := 'Clark' }}
assert($lineno$, S .where(S# = 'S4') = Ss4)
assert($lineno$, count(S .where(SNAME = 'Clark')) = 1)
assert($lineno$, S .where(STATUS = 20) <> Ss4)
assert($lineno$, S .where(STATUS = 20) sup Ss4)
assert($lineno$, count(S .where(STATUS = 20)) = 2)

finish($filename$)

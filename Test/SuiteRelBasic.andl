// Test Suite Relational Basics -- literals, set operators, where, select, order

#catalog

start($filename$)

//--- literals

//-- tuples
~tup1 := { A1 := 'abc', A2 := 17, A3 := 0 } 
~tup2 := tup(A1 := 'abc', A4 := 44)
~tup3 := { A := ~tup1 } 
~tup4 := { A := { A := 'abc' } } 
~tup5 := { A := tup(A := 'abc') } 
def ~ust1(C1:0, C2:'')
~tup6 := { A := ~ust1(77,'xxx') } 

// tuple values
test_true($lineno$, ~tup1 = {A2 := 16+1, A1 := 'ab' & 'c', A3 := 0})
test_true($lineno$, {A2 := 18-1, A1 := 'a''bc', A3 := 0}    = ~tup1)
test_true($lineno$, ({A2 := 17, A1 := "abc", A3 := 0})      = ~tup1)
test_true($lineno$, tup(A2 := 17, A1 := "abc", A3 := 0)     = ~tup1)
test_true($lineno$, ~tup4                                   = ~tup5)
test_true($lineno$, { A := tup(A := 'abc') }                = ~tup5)
test_true($lineno$, { A := ~ust1(77,'xxx') }                = ~tup6)

// tuple set ops
test_true($lineno$, { A1 := 'abc', A2 := 17, A3 := 0, A4 := 44 } = ~tup1 union ~tup2)
test_true($lineno$, { A1 := 'abc', A2 := 17, A3 := 0, A4 := 44 } = ~tup2 union ~tup1)
test_true($lineno$, { A1 := 'abc' }                              = ~tup1 intersect ~tup2)
test_true($lineno$, { A1 := 'abc' }                              = ~tup2 intersect ~tup1)
test_true($lineno$, { A2 := 17, A3 := 0 }                        = ~tup1 minus ~tup2)
test_true($lineno$, { A4 := 44 }                                 = ~tup1 rminus ~tup2)
test_true($lineno$, { A4 := 44 }                                 = ~tup2 minus ~tup1)
test_true($lineno$, { A2 := 17, A3 := 0, A4 := 44 }              = ~tup1 symdiff ~tup2)
test_true($lineno$, { A2 := 17, A3 := 0, A4 := 44 }              = ~tup2 symdiff ~tup1)

//-- relations
~rel0 := {{A2:0, A1:'', A3:0}}  
~rel1 := rel({A2 := 17, A1 := 'abc', A3 := 0})
~rel2 := {{A1 := 'def', A2 := 35, A3 := 0},
          {A2 := 199, A1 := 'ghij', A3 := 0 }} 
~rel3 := {{A1:'', A2:0, A3:0} 
          ('abc', 17, 0), 
          ('def', 35, 0), 
          ('ghij', 199, 0)} 
def ~usr0(A2:0, A1:'', A3:0)

test_true($lineno$, {{ A1 := 'abc', A2 := 17, A3 := 0 }}         = ~rel1)
test_true($lineno$, {{ A2 := 1+16, A1 := 'ab'&'c', A3 := 0 }}    = ~rel1)
test_true($lineno$, rel({ A2 := 18-1, A1 := 'a'&'bc', A3 := 0 }) = ~rel1)
test_true($lineno$, rel(~tup1)                                   = ~rel1)
test_true($lineno$, rel:~rel3()                                  = ~rel0)
test_true($lineno$, rel:~usr0()                                  = ~rel0)

test_true($lineno$, ~rel3 = {{ A2 := 35, A1 := 'def', A3 := 0 },
      { A2 := 17, A1 := 'abc', A3 := 0},
      { A2 := 17, A1 := 'abc', A3 := 0},
      { A2 := 17, A1 := 'abc', A3 := 0},
      { A1 := 'ghij', A2 := 199, A3 := 0 }})

// heading forms
test_true($lineno$, ~rel1 = {{ A1:'', A2:0, A3:0 } ('abc', 17, 0)})
test_true($lineno$, ~rel1 = {{ A1:text, A2:number, A3:number } ('abc', 17, 0)})
test_true($lineno$, ~rel3 = {{ A1:'', A2:0, A3:0 } ('abc', 17, 0), ('def', 35, 0), ('ghij',199, 0)})
test_true($lineno$, ~rel3 = rel({ A1:'', A2:0, A3:0 } ('abc', 17, 0), ('def', 35, 0), ('ghij',199, 0)))

//--- simple operators

//-- count
test_true($lineno$, count({{:}}) = 0)
test_true($lineno$, count({{}}) = 1)
test_true($lineno$, count(~rel0) = 0)
test_true($lineno$, count(~rel1) = 1)
test_true($lineno$, count(~rel3) = 3)
test_true($lineno$, {{:}} .count = 0)
test_true($lineno$, {{}} .count = 1)
test_true($lineno$, ~rel0 .count = 0)
test_true($lineno$, ~rel1 .count = 1)
test_true($lineno$, ~rel3 .count = 3)

//-- sub sup sep
test_true($lineno$, {{:}} sub {{:}})
test_true($lineno$, {{:}} sub {{}})
test_true($lineno$, {{}} sub {{}})
test_true($lineno$, ~rel0 sub ~rel0)
test_true($lineno$, ~rel0 sub ~rel1)
test_true($lineno$, ~rel0 sub ~rel3)
test_true($lineno$, ~rel1 sub ~rel1)
test_true($lineno$, ~rel1 sub ~rel3)
test_true($lineno$, ~rel3 sub ~rel3)

test_true($lineno$, {{:}} sup {{:}})
test_true($lineno$, {{}} sup {{:}})
test_true($lineno$, {{}} sup {{}})
test_true($lineno$, ~rel3 sup ~rel3)
test_true($lineno$, ~rel3 sup ~rel1)
test_true($lineno$, ~rel3 sup ~rel0)
test_true($lineno$, ~rel1 sup ~rel1)
test_true($lineno$, ~rel1 sup ~rel0)
test_true($lineno$, ~rel0 sup ~rel0)

test_true($lineno$, ~rel1 sep ~rel2)
test_true($lineno$, ~rel2 sep ~rel1)

//--- meta data uses internal table
~rel2_meta := {{ Name := 'A1', Type := 'text'}, 
             { Name := 'A2', Type := 'number'},
             { Name := 'A3', Type := 'number'} }

test_true($lineno$, schema(~rel3) = ~rel2_meta)
test_true($lineno$, ~rel3 .schema = ~rel2_meta)
//--- monadic RA

~rel3_A1 := {{ A1:''} ('abc'), ('def'), ('ghij'), }
~rel3_A1X := {{ X:''} ('abc'), ('def'), ('ghij'), }

//--- where
test_true($lineno$, ~rel3  = ~rel3 .where(true))
test_true($lineno$, ~rel0  = ~rel3 .where(false))
test_true($lineno$, ~rel0  = ~rel3 .where(A1 = 'xyz'))
test_true($lineno$, ~rel0  = ~rel3 .where(A2 = 0))
test_true($lineno$, ~rel1  = ~rel3 .where(A1 = 'abc'))
test_true($lineno$, ~rel1  = ~rel3 .where(A1 < 'def'))
test_true($lineno$, ~rel1  = ~rel3 .where(A2 = 17))
test_true($lineno$, ~rel1  = ~rel3 .where(A2 < 35))

test_true($lineno$, 3    = ~rel3 .where(true) .count)
test_true($lineno$, 0    = ~rel3 .where(false) .count)
test_true($lineno$, 2    = ~rel3 .where(A1 > 'abc') .count)
test_true($lineno$, 2    = ~rel3 .where(A2 > 17) .count)

//--- project
test_true($lineno$, {{:}}         = {{:}} .select{ } )
test_true($lineno$, {{}}          = {{}} .select{ } )
test_true($lineno$, {{}}          = ~rel1 .select{ } )
test_true($lineno$, ~rel3         = ~rel3 .select{ * } )
test_true($lineno$, ~rel3_A1      = ~rel3 .select{ A1 } )
test_true($lineno$, ~rel3_A1      = ~rel3 .select{ *A2, A3 } )
test_true($lineno$, {{ A3 := 0 }} = ~rel3 .select{ A3 } )
test_true($lineno$, {{ A3 := 0 }} = ~rel3 .select{ *A1, A2 } )

//--- rename
test_true($lineno$, {{ X := 0 }}  = ~rel3 .select{ X := A3 } )
test_true($lineno$, {{ X := 0 }}  = ~rel3 .select{ *A1, A2, X := A3 } )
test_true($lineno$, ~rel3_A1X     = ~rel3 .select{ X := A1 } )

//--- extend
~rel3_A1Y := {{ Y:''} ('abcY'), ('defY'), ('ghijY'), }
test_true($lineno$, ~rel3_A1Y     = ~rel3 .select{ Y := A1 & 'Y' } )
test_true($lineno$, ~rel3_A1Y     = ~rel3 .select{ *A1, A2, A3, Y := A1 & 'Y' } )

//--- lift
~rel2_lift := rel:{A1:'', A2:0}(('a',1),('b',5),('c',2),)
test_true($lineno$, rel:{A2:0}((5),(1),(2)) = ~rel2_lift .select(A2) )
test_true($lineno$, rel:{A2:0}((5))         = ~rel2_lift .where(A1 = 'b') .select(A2) )
test_true($lineno$, 5                       = ~rel2_lift .where(A1 = 'b') .select((A2)) )
test_true($lineno$, rel:{A2:0}((5),(1),(2)) = ~rel2_lift .select{A2} )
test_true($lineno$, rel:{A2:0}((5))         = ~rel2_lift .where(A1 = 'b') .select{A2} )
test_true($lineno$, 5                       = ~rel2_lift .where(A1 = 'b') .select{(A2)} )


//--- skip take
//get_s(s:S) => s .order(S#)  .select{ fold(&,S#) }
_test_s(s:S,t:'') => s .order(S#)  .select{ fold(&,S#) } = t

test_true($lineno$, _test_s(S, 'S1S2S3S4S5'))
test_true($lineno$, _test_s(S .take(2), 'S1S2'))
test_true($lineno$, _test_s(S .skip(2), 'S3S4S5'))
test_true($lineno$, _test_s(S .take(4) .skip(2), 'S3S4'))
test_true($lineno$, _test_s(S .skip(2) .take(2), 'S3S4'))
test_true($lineno$, _test_s(S .take(4) .skip(1) .take(2), 'S2S3'))
test_true($lineno$, _test_s(S .skip(1) .take(3) .skip(1), 'S3S4'))

test_true($lineno$, S  .select{ S# } = {{ S# := 'S1' }, { S# := 'S2'}, { S# := 'S3'}, { S# := 'S4'}, { S# := 'S5' }} )
test_true($lineno$, S .skip(3)  .select{ S# } = {{ S# := 'S4'}, { S# := 'S5' }} )
test_true($lineno$, S  .select{ S# } = {{ S# := 'S1' }, { S# := 'S2'}, { S# := 'S3'}, { S# := 'S4'}, { S# := 'S5' }} )

//--- function types -- incomplete
_fn1bo(a:bool) => a
_fn1bi(a:binary) => a
_fn1nu(a:number) => a
_fn1te(a:text) => a
_fn1ti(a:time) => a

_fn2bo(a:bool) => not a
_fn2bi(a:binary) => b'05040302'  // no available func
_fn2nu(a:number) => a+1
_fn2te(a:text) => before(a,'world') & 'fred'
_fn2ti(a:time) => t'2016-12-31 23:59:59.999' // no available func

_fn3bo(a:bool) => fold(or,a)
_fn3bi(a:binary) => a // no available func
_fn3nu(a:number) => fold(+,a)
_fn3te(a:text) => fold(&,a)
_fn3ti(a:time) => a // no available func

_r1 := {{ bo:=true, bi:=b'0102030405', nu:=123456789.123456789, te:='hello world', ti:=t'2015-12-31 23:59:59.999' }}
_r2 := {{ bo:=false, bi:=b'05040302', nu:=123456790.123456789, te:='hello fred', ti:=t'2016-12-31 23:59:59.999' }}
_r3 := _r1
R := _r1

test_true($lineno$, _r1 = R)
test_true($lineno$, _r1 = R .select{ bo := _fn1bo(bo), bi := _fn1bi(bi), nu := _fn1nu(nu), te := _fn1te(te), ti := _fn1ti(ti) })
test_true($lineno$, _r2 = R .select{ bo := _fn2bo(bo), bi := _fn2bi(bi), nu := _fn2nu(nu), te := _fn2te(te), ti := _fn2ti(ti) })
test_true($lineno$, _r3 = R .select{ bo := _fn3bo(bo), bi := _fn3bi(bi), nu := _fn3nu(nu), te := _fn3te(te), ti := _fn3ti(ti) })

finish($filename$)

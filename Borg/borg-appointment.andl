// Borg model - Appointment

// note: private is a reserved word
appointment := {{
    appt_date:time, appt_num:0, duration:0, text, skip_list, next_todo:time, 
    vacation:bool, holiday:bool, privat:bool, times:0, frequency, todo:bool, color, rpt:bool, category, reminders, untimed:bool, 
    encrypted:bool, repeat_until:time, priority:0, create_time:time, lastmod:time, uid, url
}}

// Appointment specials

getnext_appointment() => do {
    appointment[ { fold(max,appt_num) }] +1
}

getnext_appointment_todo() => do {
    appointment[ ?(todo and appt_date > now()) { fold(min,appt_date) }]
}

// Appointment CRUD

// Add a set of appointments
add_appointment(appt:appointment) => do {
    appointment := union appt [ { * 
        appt_num := getnext_appointment(),
        next_todo := getnext_appointment_todo(), 
        create_time := now(), 
        lastmod := now()
    } ]
}

// Replace a set of appointments
put_appointment_id(aid:0, appt:appointment) => do {
    appointment := [ ?(appt_num = aid) ]
    appointment := union appt [ { *
        appt_num := aid,
        lastmod := now(),
    }]
}

// Delete appointment by id
delete_appointment_id(aid:0) => do {
    appointment := [ ?(appt_num = aid) ]
}

// Find appointment by id
get_appointment_id(aid:0) => do {
    appointment[ ?(appt_num = aid) ]
}

// Find all appointments
get_appointment() => do {
    appointment
}

//--- Appointment extra queries

get_appointment_by_text(t) => do {
    appointment [ ?(text = t) ]
}

get_appointment_by_uid(u) => do {
    appointment [ ?(uid = u) ]
}

get_appointment_ids() => do {
    appointment[ { num := appt_num } ]
}

get_appointment_todo_ids() => do {
    appointment[ ?(todo) { num := appt_num } ]
}

get_appointment_rpt_ids() => do {
    appointment[ ?(rpt) { num := appt_num } ]
}


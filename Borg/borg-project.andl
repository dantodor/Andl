// Borg model - project

project := {{ 
    id:0, start_date:time, due_date:time, description, category, status, parent:0
}}

// Find next id
getnext_project() => do {
    project [ { fold(max,id) } ] +1
}

// project REST CRUD

// Add a set of projects
add_project(pr:project) => do {
    if(pr.count <> 1, fail("add_project", "must be single record"), do{})
    a := pr [ { *
        id := getnext_project(),
    }]
    project := union a
    a
}

// Replace a set of projects
put_project_id(pid:0, pr:project) => do {
    if(pr.count <> 1, fail("put_project", "must be single record"), do{})
    project := [ ?(id = pid) ]
    project := union pr [ { * id := pid} ]
}

// Delete project by id
delete_project_id(pid:0) => do {
    project := [ ?(id = pid) ]
}

// Find project by id
get_project_id(pid:0) => do {
    project[ ?(id = id) ]
}

// Find all projects
get_project() => do {
    project
}

//--- Project other queries

// Find subprojects for a parent
get_project_by_parent(pid:0) => do {
    project [ ?(parent = pid) $(start_date) ]
}

// Find projects for a task
get_project_by_task(taskid:0) => do {
    project [ ?(id = taskid) ]
}


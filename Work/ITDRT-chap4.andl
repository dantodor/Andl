////////////////////////////////////////////////////////////////////////
// Introduction to Relational Database Theory - Hugh Darwen
// Chapter 4 - updated syntax

// Functions only used in this script
FirstLetter(s:'') => left(s,1)
StartsWith(s1:'',s2:'') => left(s1,1) = s2

var enrolment(csv), is_called(csv), is_enrolled_on(csv), course(csv), exam_mark(csv)

// ITDRT p89 4.1
is_called join is_enrolled_on

// ITDRT p96 4.2
is_called  .{* Sid := StudentId } 

// ITDRT p98 4.3 Fig 4.5
is_called  .{* Sid1 := StudentId }  join is_called .{* Sid2 := StudentId }  

// ITDRT p100 4.4 Fig 4.6
enrolment .{*CourseId}

// ITDRT p105 4.7 Eg 4.6
is_called join {{ Name := 'Boris' }}

// ITDRT p105 4.7 eg 4.7
is_called  .where(Name = 'Boris') 

// ITDRT p106 eg 4.8
is_called  .where(FirstLetter(Name) = 'B') 
is_called  .where(StartsWith(Name, 'B')) 

// ITDRT p107 fig 4.8
(is_called .{*Sid1 := StudentId} join is_called .{*Sid2 := StudentId}) .where(Sid1 <> Sid2) .{Sid1, Sid2}

// ITDRT p107 fig 4.9
(is_called .{*Sid1 := StudentId} join is_called .{*Sid2 := StudentId}) .where(Sid1 < Sid2) .{Sid1, Sid2}

// ITDRT p108 4.8 fig 4.10
is_called .{* Initial := FirstLetter(Name) }

// ITDRT p112 4.9 fig 4.11
is_called  .where(Name = 'Devinder') .{StudentId} union is_enrolled_on .where(CourseId = 'C1') .{StudentId}

// ITDRT p114 Ex 4.10
is_called  .where(Name = 'Devinder') .{StudentId} minus is_enrolled_on .where(CourseId = 'C1') .{StudentId}

// ITDRT p115 Fig 4.12
is_called notmatching is_enrolled_on
